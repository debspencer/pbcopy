// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: test.proto

package test

type Base_OnOff int32

const (
	Base_off Base_OnOff = 0
	Base_on  Base_OnOff = 1
)

type Bad struct {
	bad `corrupt line here testing Next Field error`
}

type BadType struct {
	bad unknownType `unknown type for testing Bad Type error`
}

type Child struct {
	Kids string `protobuf:"bytes,1,opt,name=kids,proto3" json:"kids,omitempty"`
}

type Base struct {
	Bit            bool              `protobuf:"varint,1,opt,name=bit,proto3" json:"bit,omitempty"`
	Smallint       int32             `protobuf:"varint,2,opt,name=smallint,proto3" json:"smallint,omitempty"`
	Largeint       int64             `protobuf:"varint,3,opt,name=largeint,proto3" json:"largeint,omitempty"`
	Smallfloat     float32           `protobuf:"fixed32,4,opt,name=smallfloat,proto3" json:"smallfloat,omitempty"`
	Largefloat     float64           `protobuf:"fixed64,5,opt,name=largefloat,proto3" json:"largefloat,omitempty"`
	Text           float64           `protobuf:"fixed64,6,opt,name=text,proto3" json:"text,omitempty"`
	Child          *Child            `protobuf:"bytes,7,opt,name=child,proto3" json:"child,omitempty"`
	Onoff          Base_OnOff        `protobuf:"varint,8,opt,name=onoff,proto3,enum=test.Base_OnOff" json:"onoff,omitempty"`
	Optbit         *bool             `protobuf:"varint,9,opt,name=optbit,proto3,oneof" json:"optbit,omitempty"`
	Optsmallint    *int32            `protobuf:"varint,10,opt,name=optsmallint,proto3,oneof" json:"optsmallint,omitempty"`
	Optlargeint    *int64            `protobuf:"varint,11,opt,name=optlargeint,proto3,oneof" json:"optlargeint,omitempty"`
	Optsmallfloat  *float32          `protobuf:"fixed32,12,opt,name=optsmallfloat,proto3,oneof" json:"optsmallfloat,omitempty"`
	Optlargefloat  *float64          `protobuf:"fixed64,13,opt,name=optlargefloat,proto3,oneof" json:"optlargefloat,omitempty"`
	Opttext        *string           `protobuf:"bytes,14,opt,name=opttext,proto3,oneof" json:"opttext,omitempty"`
	Optchild       *Child            `protobuf:"bytes,15,opt,name=optchild,proto3,oneof" json:"optchild,omitempty"`
	Optonoff       *Base_OnOff       `protobuf:"varint,16,opt,name=optonoff,proto3,enum=test.Base_OnOff,oneof" json:"optonoff,omitempty"`
	Listbit        []bool            `protobuf:"varint,17,rep,packed,name=listbit,proto3" json:"listbit,omitempty"`
	Listsmallint   []int32           `protobuf:"varint,18,rep,packed,name=listsmallint,proto3" json:"listsmallint,omitempty"`
	Listlargeint   []int64           `protobuf:"varint,19,rep,packed,name=listlargeint,proto3" json:"listlargeint,omitempty"`
	Listsmallfloat []float32         `protobuf:"fixed32,20,rep,packed,name=listsmallfloat,proto3" json:"listsmallfloat,omitempty"`
	Listlargefloat []float64         `protobuf:"fixed64,21,rep,packed,name=listlargefloat,proto3" json:"listlargefloat,omitempty"`
	Listtext       []string          `protobuf:"bytes,22,rep,name=listtext,proto3" json:"listtext,omitempty"`
	Listchild      []*Child          `protobuf:"bytes,23,rep,name=listchild,proto3" json:"listchild,omitempty"`
	Listonoff      []Base_OnOff      `protobuf:"varint,24,rep,packed,name=listonoff,proto3,enum=test.Base_OnOff" json:"listonoff,omitempty"`
	Maptbit        map[bool]bool     `protobuf:"bytes,25,rep,name=maptbit,proto3" json:"maptbit,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mapsmallint    map[int32]int32   `protobuf:"bytes,26,rep,name=mapsmallint,proto3" json:"mapsmallint,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Maplargeint    map[int64]int64   `protobuf:"bytes,27,rep,name=maplargeint,proto3" json:"maplargeint,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Maptext        map[string]string `protobuf:"bytes,28,rep,name=maptext,proto3" json:"maptext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mapchild       map[string]*Child `protobuf:"bytes,29,rep,name=mapchild,proto3" json:"mapchild,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}
